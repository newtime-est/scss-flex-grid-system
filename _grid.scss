/* GRID SYSTEM */
/** ========================================================================== */

/* Grid Params: */
/* Name: string
 * size: number
 * has-previous: bool
 * has-next: bool
*/

$xs: 0px !default;
$sm: 576px !default;
$md: 768px !default;
$lg: 992px !default;
$xl: 1280px !default;

$media-sizes: (
    ("xs", $xs, false, true),
    ("sm", $sm, true, true),
    ("md", $md, true, true),
    ("lg", $lg, true, true),
    ("xl", $xl, true, false)
) !default;

$grid-length: 12 !default;

$grid-padding: 15px !default;
$grid-padding-small: 10px !default;
$grid-padding-extra-small: 5px !default;

$grid-spacing-bottom: 30px !default;

/* Normalize */
/* --------------------------------------------------------------------------- */
@-ms-viewport {
    width: device-width;
}

html {
    box-sizing: border-box;
    -ms-overflow-style: scrollbar;
}

body {
    margin: 0;
    overflow-x: hidden;
    overflow-y: auto;
}

*,
*::before,
*::after {
    box-sizing: inherit;
}

/* Grid container */
/* --------------------------------------------------------------------------- */
.container {
    position: relative;
    margin: 0 auto;
    padding: 0 $grid-padding;
}

.container:before,
.container:after {
    content: "";
    display: table;
    clear: both;
}

/* Grid row */
/* --------------------------------------------------------------------------- */

.grid-row {
    margin: 0 -#{$grid-padding};

    &.grid-row--include-margin {
        > [class*="grid-"] {
            margin-bottom: $grid-spacing-bottom;
        }
    }
}

.grid-row:before,
.grid-row:after {
    content: "";
    display: table;
    clear: both;
}

/* FLEX SYSTEM */
/** ========================================================================== */
/* Flex */
/* --------------------------------------------------------------------------- */
.flex {
    display: -webkit-flex;
    display: flex;
    margin: 0 -#{$grid-padding};

    @include flex-warp(wrap);

    &.flex--height-inherit {
        height: inherit;
    }

    &.flex--no-gutter {
        margin: 0;

        > [class*="flex-"] {
            padding: 0;
        }
    }

    &.flex--include-margin {
        > [class*="flex-"] {
            margin-bottom: $grid-spacing-bottom;
        }
    }

    &.flex--small-padding {
        margin: 0 -#{$grid-padding-small};

        > [class*="flex-"] {
            padding: 0 $grid-padding-small;
        }
    }

    &.flex--extra-small-padding {
        margin: 0 -#{$grid-padding-extra-small};

        > [class*="flex-"] {
            padding: 0 $grid-padding-extra-small;
        }
    }
}

/* Grid/flex columns */
/* --------------------------------------------------------------------------- */
@each $media in $media-sizes {
    $grid: nth($media, 1);

    @for $index from 1 through $grid-length {
        .grid-#{$grid}-#{$index} {
            float: left;
            width: 100%;
            padding: 0 $grid-padding;
        }

        .flex-#{$grid}-#{$index} {
            position: relative;
            width: 100%;
            min-height: 1px;
            padding: 0 $grid-padding;
        }
    }

    .flex-#{$grid}-auto {
        position: relative;
        width: 100%;
        min-height: 1px;
        padding: 0 $grid-padding;
    }

    .flex-#{$grid}-order-first {
        @include flex-order(-1);
    }

    .flex-#{$grid}-order-last {
        @include flex-order($grid-length);
    }
}

@for $index from 1 through $grid-length {
    $percentage: percentage($index / 12);

    .grid-xs-#{$index} {
        width: $percentage;
    }

    .grid-xs-offset-#{$index} {
        margin-left: $percentage;
    }

    .grid-xs-push-#{$index} {
        position: relative;
        left: $percentage;
    }

    .grid-xs-pull-#{$index} {
        position: relative;
        right: $percentage;
    }

    .flex-xs-#{$index} {
        @include flex(0 0 $percentage);
        max-width: $percentage;
    }

    .flex-xs-order-#{$index} {
        @include flex-order($index);
    }

    .flex-xs-offset-#{$index} {
        margin-left: $percentage;
    }
}

@for $media-index from 1 through length($media-sizes) {
    $media: nth($media-sizes, $media-index);

    $grid: nth($media, 1);
    $size: nth($media, 2);
    $has-prev: nth($media, 3);
    $has-next: nth($media, 4);

    @media (min-width: #{$size}) {
        @if $size != "xs" {
            @for $index from 1 through $grid-length {
                $percentage: percentage($index / 12);

                .grid-#{$grid}-#{$index} {
                    width: $percentage;
                }

                .grid-#{$grid}-offset-#{$index} {
                    margin-left: $percentage;
                }

                .grid-#{$grid}-push-#{$index} {
                    position: relative;
                    left: $percentage;
                }

                .grid-#{$grid}-pull-#{$index} {
                    position: relative;
                    right: $percentage;
                }

                .flex-#{$grid}-#{$index} {
                    @include flex(0 0 $percentage);
                    max-width: $percentage;
                }

                .flex-#{$grid}-order-#{$index} {
                    @include flex-order($index);
                }

                .flex-#{$grid}-offset-#{$index} {
                    margin-left: $percentage;
                }
            }
        }
    }

    @if $has-next {
        $next-media: nth($media-sizes, $media-index + 1);
        $next-media-size: nth($next-media, 2);

        @if $has-prev {
            @media (min-width: $size) and (max-width: $next-media-size - 1) {
                .hidden-#{$grid} {
                    display: none !important;
                }

                .grid-#{$grid}-no-offset,
                .flex-#{$grid}-no-offset {
                    margin: 0;
                }

                .no-padding-#{$grid} {
                    padding: 0;
                }
            }
        } @else {
            @media (max-width: $next-media-size - 1) {
                .hidden-#{$grid} {
                    display: none !important;
                }

                .grid-#{$grid}-no-offset,
                .flex-#{$grid}-no-offset {
                    margin: 0;
                }

                .no-padding-#{$grid} {
                    padding: 0;
                }
            }
        }
    } @else {
        @media (min-width: $size) {
            .hidden-#{$grid} {
                display: none !important;
            }

            .grid-#{$grid}-no-offset,
            .flex-#{$grid}-no-offset {
                margin: 0;
            }

            .no-padding-#{$grid} {
                padding: 0;
            }
        }
    }
}


.flex-top,
.flex-middle,
.flex-bottom,
.flex-center,
.flex-right,
.flex-vh-middle {
    display: -webkit-flex;
    display: flex;
}

.flex-top {
    -webkit-align-items: flex-start;
    align-items: flex-start;
}

.flex-middle {
    -webkit-align-items: center;
    align-items: center;
}

.flex-bottom {
    -webkit-align-items: flex-end;
    align-items: flex-end;
}

.flex-center {
    -webkit-justify-content: center;
    justify-content: center;
}

.flex-right {
    -webkit-justify-content: flex-end;
    justify-content: flex-end;
}

.flex-vh-middle {
    -webkit-align-items: center;
    align-items: center;
    -webkit-justify-content: center;
    justify-content: center;
}


/* Modular framework items */
/* --------------------------------------------------------------------------- */
.clear:before,
.clear:after {
    content: "";
    display: table;
    clear: both;
}

.hidden {
    display: none !important;
}

.block {
    display: block;
    width: 100%;
}

.align-top {
    vertical-align: top;
}

.align-middle {
    vertical-align: middle;
}

.align-bottom {
    vertical-align: bottom;
}

.align-left {
    text-align: left;
}

.align-center {
    text-align: center;
}

.align-right {
    text-align: right;
}

.no-padding {
    padding: 0;
}

.relative {
    position: relative;
}
